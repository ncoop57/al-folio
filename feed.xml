<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://ncoop57.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ncoop57.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-10-22T07:51:46+00:00</updated><id>https://ncoop57.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">DeepSpeed Investigation: What I Learned</title><link href="https://ncoop57.github.io/blog/2021/DeepSpeed-Investigation/" rel="alternate" type="text/html" title="DeepSpeed Investigation: What I Learned" /><published>2021-05-03T00:00:00+00:00</published><updated>2021-05-03T00:00:00+00:00</updated><id>https://ncoop57.github.io/blog/2021/DeepSpeed-Investigation</id><content type="html" xml:base="https://ncoop57.github.io/blog/2021/DeepSpeed-Investigation/"><![CDATA[<p>Deep learning is awesome, but the large compute and data requirements can prevent a lot of amazing people from using the models and contributing to the field. So, when I read about the amazing <a href="https://www.deepspeed.ai/">DeepSpeed</a> library allowing people with just a single GPU (like myself) to train massive models that would normally require multiple GPUs to just fit in memory, I had to investigate further!</p>

<h2 id="what-is-deepspeed">What is DeepSpeed?</h2>

<p>Here is a brief blurb from the DeepSpeed website on what it is and what it can do:</p>

<p>‚Äú</p>

<p>DeepSpeed is a deep learning optimization library that makes distributed training easy, efficient, and effective.</p>

<p><strong><em>10x Larger Models</em></strong></p>

<p><strong><em>10x Faster Training</em></strong></p>

<p><strong><em>Minimal Code Change</em></strong></p>

<p>DeepSpeed delivers extreme-scale model training for everyone, from data scientists training on massive supercomputers to those training on low-end clusters or even on a single GPU</p>

<p>‚Äú</p>

<p>Some impressive statements, but are they true? Kind of. Let‚Äôs dig a bit deeper into how this works.</p>

<figure>

  <picture>
    <source media="(max-width: 480px)" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2020/05/1400x788DeepSpeedslowed.gif-480.webp" />
    <source media="(max-width: 800px)" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2020/05/1400x788DeepSpeedslowed.gif-800.webp" />
    <source media="(max-width: 1400px)" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2020/05/1400x788DeepSpeedslowed.gif-1400.webp" />
    <!-- Fallback to the original file -->
    <img class="img-fluid rounded z-depth-1" src="https://www.microsoft.com/en-us/research/uploads/prod/2020/05/1400x788DeepSpeedslowed.gif" data-zoomable="" />

  </picture>

</figure>

<div class="caption">
    Overview of the large improvement ZeRO-2 and the DeepSpeed library has over ZeRO-2 and previous approaches.
    <br />
    From https://www.microsoft.com/en-us/research/blog/zero-2-deepspeed-shattering-barriers-of-deep-learning-speed-scale/
</div>

<p>DeepSpeed is a library that enables the awesome <a href="https://arxiv.org/abs/1910.02054">Zero Redundancy Optimizer (ZeRO)</a>, which is a highly optimized optimizer (oh how clever) that improves memory management and communication in data or model parallelized work loads by removing redundancy. Now, this might bring up the question ‚Äúparallelized work loads, I thought we could use this on a single GPU, what‚Äôs the deal?‚Äù So, the deal is that ZeRO was made to solve the problem of communication between multiple devices by doing some nifty memory tricks that are beyond the scope of this blog post (and my understanding. See <a href="https://youtu.be/tC01FRB0M7w">here</a> for a full explanation of this.). It just so happens that the ZeRO optimizer also performs CPU offloading, which moves some of the computation off your GPU and onto your CPU. With things being computed on your CPU, some of the model is stored in RAM rather than the GPUs VRAM. This significantly slows computation since CPUs and RAM wasn‚Äôt built with this in mind, but it means you are allowed to train bigger models and train with bigger batch sizes ü§ì.</p>

<h2 id="putting-deepspeed-to-the-test">Putting DeepSpeed to the Test!</h2>

<p>To test out DeepSpeed, I used the awesome HuggingFace transformers library, which supports using DeepSpeed on their non-stable branch (though support is coming to the stable branch in 4.6 ü§ì). I followed these awesome <a href="https://huggingface.co/transformers/master/main_classes/trainer.html#deepspeed">instructions</a> on the HuggingFace‚Äôs website for getting started with DeepSpeed and HuggingFace. If you want to follow along at home, I created a Github <a href="https://github.com/ncoop57/deepspeed_testing">repository</a> with the Dockerfile (I‚Äôm addicted to docker and will probably make a blog post on docker too :)) and the test script I used to run my experiments on. I tried training the different versions of the awesome <a href="https://arxiv.org/abs/1910.10683">T5 model</a> that ranged from smallish ~60 million parameters to humungous 3 billion parameters. And here are my results:</p>

<figure>

  <picture>
    <source media="(max-width: 480px)" srcset="/assets/img/deepspeed_chart-480.webp" />
    <source media="(max-width: 800px)" srcset="/assets/img/deepspeed_chart-800.webp" />
    <source media="(max-width: 1400px)" srcset="/assets/img/deepspeed_chart-1400.webp" />
    <!-- Fallback to the original file -->
    <img class="img-fluid rounded z-depth-1" src="/assets/img/deepspeed_chart.png" data-zoomable="" />

  </picture>

</figure>

<div class="caption">
    Bar chart showing DeepSpeed increases time to train, but allows training larger models compared to not using DeepSpeed.
    <br />
    This was run on a machine with Ubuntu 20.04, 32GBs of RAM, Ryzen 5600x, and NVIDIA RTX 3080 GPU.
</div>

<p>This is a chart of the different models‚Äô training time in seconds with and without DeepSpeed and the biggest batch size I could fit for each. As you can see, using DeepSpeed increases training time, except for t5-small where the time is nearly identical. However, you‚Äôll notice for t5-base (~220 million parameters) and t5-large (~770 million parameters) I am able to use a larger batch size, this is most noticable in the t5-large model where I can double the batch size. This is the important part that DeepSpeed gives you, it allows you to use larger batch sizes even if it increases the training time. Having large batch sizes is critical for many deep learning models as it allows the model to see more examples when doing updates thereby improving performance. This is the use case of using DeepSpeed, using big models with large batch sizes. If what you are doing doesn‚Äôt involve these two things, then you probably should skip DeepSpeed.</p>

<p><strong>Note:</strong> You‚Äôll notice there is no bar for a 3 billion parameter model (t5-3b). This is because my PC cried out when I attempted to train the model even with DeepSpeed and a batch size of 1.</p>

<h2 id="conclusion-time">Conclusion Time</h2>

<p>So, with all things considered, DeepSpeed is an awesome library and ZeRO is an amazing optimizer. However, if you were looking for super speed boosts for a single GPU like I was, it ain‚Äôt it chief. ZeRO is designed for speeding up multi-GPU setups by efficiently handling memory resources and communication and in doing so does reduce the memory footprint on GPUs. It also does some awesome CPU offloading, which will allow you to train huge models with large batch sizes on a single GPU that you would not be able to normally. The part of larger batch sizes is super important for many deep learning models as it can improve their performance. So, my take away from this investigation is this: If you are using a multi-GPU setup, DeepSpeed is the way to go. However, for single GPU uses, only use it if you need a larger model andlarger batch sizes than what your normal GPU can handle.</p>

<p>Hope you‚Äôve enjoyed this blog post and learned some information along the way. Comment down below with any questions you have, I‚Äôd be happy to help answer them!</p>

<p>Connect with me:</p>

<p>Website - <a href="https://nathancooper.io/#/">https://nathancooper.io/#/</a></p>

<p>YouTube - <a href="https://www.youtube.com/channel/UCKfOCnojK5YV7_hdPjAtY7Q">https://www.youtube.com/channel/UCKfOCnojK5YV7_hdPjAtY7Q</a></p>

<p>Github - <a href="https://github.com/ncoop57">https://github.com/ncoop57</a></p>

<p>Twitter - <a href="https://twitter.com/ncooper57">https://twitter.com/ncooper57</a></p>

<p>LinkedIn - <a href="https://www.linkedin.com/in/nathan-cooper-820292106/">https://www.linkedin.com/in/nathan-cooper-820292106/</a></p>]]></content><author><name>Nathan Cooper</name></author><category term="deepspeed" /><category term="deep-learning" /><summary type="html"><![CDATA[An investigation into the awesome DeepSpeed library for training large models on a single GPU!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ncoop57.github.io/images/deepspeed_overview.png" /><media:content medium="image" url="https://ncoop57.github.io/images/deepspeed_overview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What I Learned (WIL) Neuroscience Month [Part 1]</title><link href="https://ncoop57.github.io/blog/2020/neuroscience-1/" rel="alternate" type="text/html" title="What I Learned (WIL) Neuroscience Month [Part 1]" /><published>2020-04-07T00:00:00+00:00</published><updated>2020-04-07T00:00:00+00:00</updated><id>https://ncoop57.github.io/blog/2020/neuroscience-1</id><content type="html" xml:base="https://ncoop57.github.io/blog/2020/neuroscience-1/"><![CDATA[<p>If you are like me, you may have thought there was quite a lot of mystery going on in your brain that the scientific community has yet to really figure out and understand. However, through my month long study I found that neuroscience has some powerful computational models and experiments that are able to explain many of the processes going on in the brain such as the visual system, how we store memories, and the process we call intuition. Of course there are still unanswered questions such as what consciousness is and how are we able to learn things with just a few examples, but I was shocked how much is known.</p>

<p>I will be going through some of the amazing things that are happening in that brain of yours through this series. This first part is devoted to the ‚Äú<strong>High Level</strong>‚Äù stuff, which involves the more complicated behavior such as how different parts of your brain contribute to your conscious experience, how you are able to solve seemly difficult problems with ease, and how this intuition of yours probably contributes to many of the logical errors you make. Let‚Äôs get right into it!</p>

<h1 id="high-level-stuff">High Level Stuff</h1>

<h2 id="system-1-and-system-2">System 1 and System 2</h2>

<p>In the amazing book ‚Äú<strong><a href="https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555">Thinking Fast and Slow</a></strong>‚Äù by Daniel Kahneman, who is a world renowned economist and neuroscientist, the high level ways in which we ‚Äúthink‚Äù are examined. In this book,  things like decisions, problem solving, emotional states, and why we make errors in our logic, both consciously and subconsciously, are shown. I highly recommend this book, I personally have been enjoying the <a href="https://www.audible.com/pd/Thinking-Fast-and-Slow-Audiobook/B005TKKCWC">Audiobook</a> version!</p>

<figure>

  <picture>
    <source media="(max-width: 480px)" srcset="/assets/img/neuroscience/systems-480.webp" />
    <source media="(max-width: 800px)" srcset="/assets/img/neuroscience/systems-800.webp" />
    <source media="(max-width: 1400px)" srcset="/assets/img/neuroscience/systems-1400.webp" />
    <!-- Fallback to the original file -->
    <img class="img-fluid rounded z-depth-1" src="/assets/img/neuroscience/systems.png" data-zoomable="" />

  </picture>

</figure>

<div class="caption">
    Overview of the two different Systems that make up your thinking.
</div>

<p>Daniel Kahneman introduced the idea of two systems of thought, which he named very creatively System 1 and System 2. System 1 is more associated with intuition or <em>fast thinking</em> that processes things without much mental strain such as looking at a picture of a cat and understanding that what you are currently looking at is in fact a cat. System 1 is also automatic in the sense that you have no control over coming to the realization that a cat is in the picture. System 2, on the other hand, is involved in more deliberate and difficult processing that requires you to put in work for solving some task such as calculating that the multiplication of 18 and 32 is equal to 576. don‚Äôt worry, I‚Äôll wait :).</p>

<figure>

  <picture>
    <source media="(max-width: 480px)" srcset="/assets/img/neuroscience/image_0-480.webp" />
    <source media="(max-width: 800px)" srcset="/assets/img/neuroscience/image_0-800.webp" />
    <source media="(max-width: 1400px)" srcset="/assets/img/neuroscience/image_0-1400.webp" />
    <!-- Fallback to the original file -->
    <img class="img-fluid rounded z-depth-1" src="/assets/img/neuroscience/image_0.jpg" data-zoomable="" />

  </picture>

</figure>

<p><em>A Cat: Image by <a href="https://pixabay.com/photos/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=984097">Free-Photos</a>** from <strong><a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=984097">Pixabay</a></strong></em></p>

<p>Yoshua Bengio, who is a pioneer of artificial intelligence and recent receiver of the Turing award along with other amazing scientists in the field, put it quite well on how these two systems work together. System 1 is great at generating representations of things and associating them with high level objects such as cats, words, and concepts. These representations are then exploited by System 2 to avoid all of the nitty gritty details of what it means for a cat to be a cat. It instead uses these concepts to do interesting things such as finding relationships between multiple objects or performing complex calculations by planning out a series of operations to perform, i.e. generating and following an algorithm for multiplying 2 numbers.</p>

<p>Daniel Kahneman also mentions many fun experiments to show how System 1 is what runs most of your day to day experiences and how this leads to a lot of logical errors. One famous experiment is the bat and ball experiment. Try and solve the following problem:</p>

<blockquote>
  <p>The cost of a bat and ball come to a total of 1 dollar and 10 cents. If the bat costs 1 dollar more than the ball, how much does the ball cost?</p>
</blockquote>

<p>If you guessed the ball costs 10 cents like I did, you were wrong and you were wrong because your System 2 is very, very lazy. A simple calculation will show that if the ball cost 10 cents and the bat is 1 dollar more, the bat would be 1 dollar and 10 cents bring the total up to 1 dollar and 20 cents.</p>

<p>The above example and many more show a common theme in how our minds work. System 1 is at fault here, it recognized some similarity in the problem and automatically offered up what seemed like a reasonable answer to the problem. However, it never even tried to check if the answer was correct. This checking is done by System 2, but System 1 was so sure of itself that System 2 did not even bother to check its answer because it takes work to verify. System 2 is involved in slow and deliberate thinking such as performing calculations or having to consider multiple pieces of information when making a decision.</p>

<p>One interesting effect that occurs when people are actively using their System 2 to solve a task is that it loosen their inhibitions. The study described in ‚Äú<strong>Thinking Fast and Slow</strong>‚Äù showed that people who were asked during an experiment whether they would like a sweet treat such as a slice of chocolate cake or a salad were more likely to choose the chocolate cake if they were also given the task of keeping 7 digits in their mind for a few minutes. It has also been shown that performing System 2 style tasks has an impact on the way people behave such as with increased selfishness and even increased use of sexist language. This is all due to System 2 style tasks requiring focus and attention on the task at hand allowing for System 1, who is known to make quick judgement calls without much thought, to take over any additional tasks you are not focusing on.</p>

<p>Our daily lives and thought process circulate around when to use System 2 for tasks that System 1 has no way of generating a <em>good</em> answer for. You may ask why we do not use System 2 for more tasks, but as discussed previously System 2 is <em>slow</em>. It would be quite dangerous if we relied on System 2 to solve how to avoid crashing into a vehicle on the highway that unexpectedly started merging into your lane without a turn signal or to duck to avoid being hit by a fast ball that‚Äôs outside of the batter‚Äôs box. An interesting feature, however, of System 2 style tasks is that if they are seen often enough, they can be upgraded to System 1 style tasks by having System 1 learn to recognize the expected answer. This is a common occurrence for driving around an <em>unfamiliar</em> path. The first few times you drive your System 2 is more attentive to make sure you get to where you are going without getting lost. Eventually, if you take the same path, it becomes <em>familiar</em> and your System 1 is able to take over allowing you to reach your destination without much attention being paid to the path you are taking.</p>

<h2 id="brain-structure">Brain Structure</h2>

<p>Now, your brain does not actually have these System 1 and System 2 structures physically, they are just a great way of discussing the way in which your brain works. However, the real way your brain is structured is a lot more messy, but still beautiful :). I found the explanation and structure of how your brain is wired in ‚Äú<strong><a href="https://grey.colorado.edu/mediawiki/sites/CompCogNeuro/images/0/0e/ccnbook_08_2016.pdf">Computational Cognitive Neuroscience</a></strong>‚Äù by Munakata et. al. to be a great resource for learning and so I will be using it as my main source for the rest of this article. While it is a lot denser than ‚Äú<strong>Thinking Fast and Slow,</strong>‚Äù it has great visualizations and goes quite in depth.</p>

<figure>

  <picture>
    <source media="(max-width: 480px)" srcset="/assets/img/neuroscience/image_1-480.webp" />
    <source media="(max-width: 800px)" srcset="/assets/img/neuroscience/image_1-800.webp" />
    <source media="(max-width: 1400px)" srcset="/assets/img/neuroscience/image_1-1400.webp" />
    <!-- Fallback to the original file -->
    <img class="img-fluid rounded z-depth-1" src="/assets/img/neuroscience/image_1.png" data-zoomable="" />

  </picture>

</figure>

<div class="caption">
    Different lobes of the human brain.
</div>

<p><em>Image by <strong><a href="https://pixabay.com/users/ArtsyBee-462611/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1007686">Oberholster Venita</a></strong> from <strong><a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1007686">Pixabay</a></strong> (Modified to have labels)</em></p>

<p>Your brain can be organized into two main parts, the Neocortex, which is what most people think of when they imagine a brain, and the Cerebellum, which is not as well known by most but is believed to play a big part in how we think. The Neocortex is the coloured part in the above image and it can be roughly broken down into 4 main <em>lobes</em>, but each lobe is heavily dependent on the others, so don‚Äôt think of them as truly distinct sections. You can see the responsibilities of each lobe in the table below.</p>

<figure>

  <picture>
    <source media="(max-width: 480px)" srcset="/assets/img/neuroscience/image_3-480.webp" />
    <source media="(max-width: 800px)" srcset="/assets/img/neuroscience/image_3-800.webp" />
    <source media="(max-width: 1400px)" srcset="/assets/img/neuroscience/image_3-1400.webp" />
    <!-- Fallback to the original file -->
    <img class="img-fluid rounded z-depth-1" src="/assets/img/neuroscience/image_3.png" data-zoomable="" />

  </picture>

</figure>

<div class="caption">
    Overall responsibilities of the different lobes of the brain.
</div>

<p>One of the most interesting parts of your brain structure is how representations of your senses like sight and sound are built up in a hierarchical fashion as your brain moves the information across the different lobes. Take your ability to easily understand what your eyes are currently seeing. This information is first processed by the Occipital lobe hierarchically at the very back of the brain, starting with identifying simple edges and then moving on to groups of edges to form basic shapes. This representation grows in complexity as the information is sent towards the other parts of the brain like the Temporal lobe where these representations are given semantic meaning in the form of words such as Cat or Human or even more specific such as Garfield the Cat. If we track the representation that your brain is building of what you are seeing into the Parietal lobe, you will find your brain generating representations for relations between the different objects in the scene such as the Cat is hanging from a tree (hang in there buddy!). Lastly, the Frontal lobe takes all these high level representations to perform any number of high level decisions and motor control movement such as petting the kitty :).</p>

<p>As you can see, even this very simple example of just processing what your eyes see involves multiple parts of your brain, even if a lot of the initial work is done by the Occipital lobe. Each lobe does its part in helping generate an understanding of the sensory input you are receiving. This is not just limited to vision, but could be any other type of senses such as smell, touch, and hearing. It‚Äôs all connected‚Ä¶</p>

<figure>

  <picture>
    <source media="(max-width: 480px)" srcset="/assets/img/neuroscience/image_2-480.webp" />
    <source media="(max-width: 800px)" srcset="/assets/img/neuroscience/image_2-800.webp" />
    <source media="(max-width: 1400px)" srcset="/assets/img/neuroscience/image_2-1400.webp" />
    <!-- Fallback to the original file -->
    <img class="img-fluid rounded z-depth-1" src="/assets/img/neuroscience/image_2.png" data-zoomable="" />

  </picture>

</figure>

<p><em><a href="https://knowyourmeme.com/memes/pepe-silvia">Pepe Silvia</a> from It‚Äôs Always Sunny in Philadelphia</em></p>

<h1 id="conclusions">Conclusions</h1>

<p>Well, sadly that is all we are going to spend on the high level stuff of the brain. There are tons of additional stuff I could discuss about the high level part of your brain such as how the Cerebellum actually has half of all the neurons in your entire brain! And how much of its functions are not well understood because it seems to have its hands in processing everything! I could also discuss how there are different types of ways different parts of your brain represent input such as clusterization, hashing, and composition of different representations into new representations. However, there is a lot and we have already covered a lot of the super cool stuff! I hope you have enjoyed this first part of the Neuroscience series and have come away with a better or at least more confusing :) sense of how your brain works!</p>

<p>I will be working to get the next <em>two parts</em> (<strong>Mid Level</strong> and <strong>Low Level</strong>) out soon as there is not much else for me to do during this COVID-19 quarantine (don‚Äôt tell my Ph.D. advisor I said that). If you have any questions or have any comments about any interesting stuff you know about the brain please comment down below, I‚Äôd love to hear it!</p>]]></content><author><name></name></author><category term="wil" /><category term="neuroscience" /><summary type="html"><![CDATA[Join me as I explore what is going on in that brain of ours.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ncoop57.github.io/img/neuroscience/mental-2197585_1920.jpg" /><media:content medium="image" url="https://ncoop57.github.io/img/neuroscience/mental-2197585_1920.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Awesome Things I Learned Creating My Own Website</title><link href="https://ncoop57.github.io/blog/2020/Awesome-Things-I-Learned-Creating-My-Own-Website/" rel="alternate" type="text/html" title="Awesome Things I Learned Creating My Own Website" /><published>2020-02-03T00:00:00+00:00</published><updated>2020-02-03T00:00:00+00:00</updated><id>https://ncoop57.github.io/blog/2020/Awesome-Things-I-Learned-Creating-My-Own-Website</id><content type="html" xml:base="https://ncoop57.github.io/blog/2020/Awesome-Things-I-Learned-Creating-My-Own-Website/"><![CDATA[<p>Hello, Solar System! (As a space faring civilization, I feel it only customary we update our greetings to reflect such awesome accomplishments ü§ì) I am a nerd and hopefully you are as well.</p>

<p>This post goes over many of the awesome technologies, resources, and overall tips and tricks I learned while creating my own personal website! This post is <strong>NOT</strong> a tutorial, mostly because there are tons of already existing ones on how to create a website and you don‚Äôt want to create <em>a website</em> or even <em>my website</em> (though mine is pretty awesome), you want you create <em>your own website</em>. For me this came from a lot of trial and error and tons of random google searches to fit some niche feature I wanted to add. So, this post is to centralize all of the niche features that went into my website in case any of you out there want to personalize some for your own website. This post is not really made to be gone through end to end, but rather for you to pick out the pieces that resonate best with you and give you inspiration for your own website.</p>

<p>Let‚Äôs get some of the boring stuff out of the way first, namely these are the main components that my website is made out of:</p>

<ul>
  <li>
    <p><a href="https://reactjs.org/">ReactJS</a> - using <a href="https://github.com/facebook/create-react-app">create-react-app</a> and</p>
  </li>
  <li>
    <p><a href="https://material-ui.com/">Material-UI</a> - for the style points üòé (Sadly not as delicious as brownie points)</p>
  </li>
  <li>
    <p><a href="https://pages.github.com/">GitHub Pages</a> - for hosting the static site (ty GitHub &lt;3), requires you use gh-pages and setup your create-react-app up correctly. Here is some <a href="https://create-react-app.dev/docs/deployment/#github-pages">documentation</a> on how that is done</p>
  </li>
  <li>
    <p><a href="https://github.com/">GitHub</a> and GitHub Pages - for storing my projects and for storing the web demos of my projects (Sounds epic, right?!?!? More on this later)</p>
  </li>
  <li>
    <p><a href="https://redux.js.org/">Redux</a> - for storing and updating state of ReactJS thingies like lists of current projects and blog posts (More on this later)</p>
  </li>
  <li>
    <p><a href="https://github.com/rexxars/react-markdown">ReactMarkdown</a> - for rendering my blog posts, which, you guessed it, are markdown files!</p>
  </li>
  <li>
    <p>Paperclips - I couldn‚Äôt afford duct tape :(</p>
  </li>
</ul>

<h1 id="niche-features-and-tips">Niche Features and Tips</h1>

<h2 id="resume-of-coding-projects">Resume of Coding Projects:</h2>

<p>The core motivation behind my website was that I wanted a cool way to show off some of my projects that I‚Äôve created over the years. I‚Äôve seen how others create theirs and actually got inspired in part by <a href="https://nmarch213.github.io/Portfolio/#/projects">https://nmarch213.github.io/Portfolio/#/projects</a>. However, the issue is that these displays of projects need to be manually created and that was a problem for me because like most developers I am lazy and I don‚Äôt want to do that. I wanted a way where I could just create new projects and they would be automatically added in the correct format, including images, titles, descriptions, etc. I could just redirect users to my GitHub page, where I place all of my coding projects, but that seemed like a cop out and did not allow for any customization. So, like any good programmer, I made a scrapper that took the output from GitHub and converted into a format for my own usage üòä. This gave my website the ability to update the list of projects automatically as I added new repositories, which the title of each project is just determined by the repository‚Äôs name. To add an image to be displayed as the project‚Äôs logo, I just add an <code class="language-plaintext highlighter-rouge">icon.png</code> file to the root of the project and grab the icon from there when displaying the list.</p>

<p>To scrape all this information, I use the amazing <a href="https://developer.github.com/v3/">GitHub API v3</a> that GitHub provides. This API offers a ton of useful features, but for scrapping my projects I specifically used the <a href="https://developer.github.com/v3/repos/#list-user-repositories">Repositories API</a>. This also has information like the repository‚Äôs description, so you could include that information in your list of projects automatically if you so choose. The GitHub API v3 has a bunch of awesome functionality, another API I use is the <a href="https://developer.github.com/v3/repos/contents/#get-contents">Contents API</a> for listing out the different posts I have created (more on this later)! For integrating these APIs using ReactJS, I suggest using <a href="https://redux.js.org/">Redux</a> for storing the state, i.e., the projects and blog posts once they have returned from the GitHub API, and <a href="https://github.com/axios/axios">Axios</a> for actually making the HTTPS requests.</p>

<p>Besides just hosting one website using GitHub Pages, you can have one per repository. Incorporating this with the dynamic list of my coding projects, I am able to now create their own page that can serve as documentation or can even be a web demo! Currently I am not using this feature to the best of its ability, but I plan on overhauling my more put together projects so that they have at the very least some documentation using this awesome feature.</p>

<p>Overall, using very simple components offered by GitHub I am able to have my custom resume of projects that dynamically updates when I create a new one and links to documentation or a web demo of the project. Any updates to the actual project are reflected on the website without additional changes to some configuration file that contains all of the projects I have.</p>

<h2 id="blog">Blog:</h2>
<p>I now do all of my blogging using the new awesome <a href="https://github.com/fastai/fastpages">fastpages</a> library built by Hamel Husain and Jeremy Howard!</p>

<h3 id="deprecated">[Deprecated]</h3>
<p>Aside from being able to high-light my accomplishments, I wanted to be able to express myself on a multitude of topics. I never thought I would be a blogger, but a blog post by the awesome Rachel Thomas, <a href="https://medium.com/@racheltho/why-you-yes-you-should-blog-7d2544ac1045">Why you (yes, you) should blog</a>, inspired me to take it seriously. I tried with Medium, but I wanted something of my own and when I saw the equally awesome Jeremy Howard discussing his work on <a href="https://github.com/fastai/fast_template">Fast Template</a> that allows you to easily create your own personal blog using GitHub Pages and simple Markdown files I knew the time was now to commit. Now while I do not directly use Fast Template, because it is a bit too rigid for the amount of customizability I like to perform, I drew a lot of inspiration, namely writing blog posts as markdown files and having them stored statically on my website instead of on some weird MongoDB. To integrate this concept of using Markdown files I needed a way to render them easily using React, which is where I found this awesomely customizable library for doing just that called <a href="https://github.com/rexxars/react-markdown">React Markdown</a>. What‚Äôs nice about React Markdown is that each of the formatting components such as code snippets and headings are separated into their own rendering engine allowing you to swap out or customize them very easily. So since I quite enjoy dark theme, I found this awesome post by <a href="https://medium.com/young-developer/react-markdown-code-and-syntax-highlighting-632d2f9b4ada">Bexultan A. Myrzatayev</a> showing how you can use a custom react highlighting engine, I use <a href="https://github.com/conorhastings/react-syntax-highlighter">React Syntax Highlighter</a>, and swap out the default theme for code syntax highlighting for something like ‚ÄúatomOneDark‚Äù! (obviously I chose a dark theme, because dark theme is the only theme)</p>

<p>To write my posts, I don‚Äôt just write directly using Markdown as that would be extremely painful. I took the advice of Jeremy Howard again from his post on <a href="https://www.fast.ai/2020/01/18/gitblog/">Syncing your blog with your PC, and using your word processor</a> and used a word processor, in my case it is <a href="https://www.google.com/docs/about/">Google Docs</a>. Sadly, Google Docs does not allow you to directly export your document as a Markdown file, but thankfully an awesome person named Mangini created <a href="https://github.com/mangini/gdocs2md">gdocs2md</a> that does the conversion and handles grabbing the images and emails them to you!</p>

<h2 id="material-design">Material Design:</h2>

<p>As a nerd and mostly a computer nerd, my artistic skills are not the best. However, I wanted my website to look stylish, clean, modern, cool, hip‚Ä¶. (words I searched google for when trying to create a pretty website). This brought me to Google, they always create such chic looking websites and mobile apps, in my opinion obviously, so it wasn‚Äôt too surprising to learn that Google wrote the bo‚Ä¶ well, website for designing GUI components, which they called <a href="https://material.io/">Material Design</a>. This is where Material-UI comes in. It is a complete React component implementation of the Material Design language and it looks smooootthhhhh. Using it is quite simple as laid out in there website, but I‚Äôm including a code snippet because I want to flex how my website is able to render code snippets courtesy of <a href="https://github.com/rexxars/react-markdown">React Markdown</a> and <a href="https://medium.com/young-developer/react-markdown-code-and-syntax-highlighting-632d2f9b4ada">Bexultan A. Myrzatayev</a>‚Äôs awesome post on how to change the theme used in code snippets :</p>

<p>Code snippet from what a project entry looks like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span>

  <span class="nx">Button</span><span class="p">,</span>

  <span class="nx">Card</span><span class="p">,</span>

  <span class="nx">CardActions</span><span class="p">,</span>

  <span class="nx">CardContent</span><span class="p">,</span>

  <span class="nx">CardMedia</span><span class="p">,</span>

  <span class="nx">Typography</span>

<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@material-ui/core</span><span class="dl">"</span><span class="p">;</span>

<span class="err">‚Ä¶</span><span class="p">.</span>

<span class="kd">const</span> <span class="nx">site</span> <span class="o">=</span> <span class="nx">has_pages</span> <span class="p">?</span> <span class="p">(</span>

    <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">variant</span><span class="o">=</span><span class="dl">"</span><span class="s2">contained</span><span class="dl">"</span> <span class="nx">color</span><span class="o">=</span><span class="dl">"</span><span class="s2">secondary</span><span class="dl">"</span> <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="nx">pages_url</span><span class="p">}</span><span class="o">&gt;</span>

      <span class="nx">View</span> <span class="nx">Site</span>

    <span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>
  <span class="p">)</span> <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>

<span class="k">return </span><span class="p">(</span>

    <span class="o">&lt;</span><span class="nx">Card</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">card</span><span class="p">}</span> <span class="nx">fullWidth</span><span class="o">&gt;</span>

      <span class="o">&lt;</span><span class="nx">CardMedia</span>

        <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">classes</span><span class="p">.</span><span class="nx">media</span><span class="p">}</span>

        <span class="nx">image</span><span class="o">=</span><span class="p">{</span><span class="nx">icon_src</span><span class="p">}</span>

        <span class="nx">onError</span><span class="o">=</span><span class="p">{</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>

          <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">cannot find icon</span><span class="dl">"</span><span class="p">);</span>

        <span class="p">}}</span>

      <span class="sr">/</span><span class="err">&gt;
</span>
      <span class="o">&lt;</span><span class="nx">CardContent</span><span class="o">&gt;</span>

        <span class="o">&lt;</span><span class="nx">Typography</span> <span class="nx">gutterBottom</span> <span class="nx">variant</span><span class="o">=</span><span class="dl">"</span><span class="s2">headline</span><span class="dl">"</span> <span class="nx">component</span><span class="o">=</span><span class="dl">"</span><span class="s2">h4</span><span class="dl">"</span><span class="o">&gt;</span>

          <span class="p">{</span><span class="nx">_</span><span class="p">.</span><span class="nf">startCase</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nf">camelCase</span><span class="p">(</span><span class="nx">name</span><span class="p">))}</span>

        <span class="o">&lt;</span><span class="sr">/Typography</span><span class="err">&gt;
</span>
      <span class="o">&lt;</span><span class="sr">/CardContent</span><span class="err">&gt;
</span>
      <span class="o">&lt;</span><span class="nx">CardActions</span><span class="o">&gt;</span>

        <span class="p">{</span><span class="nx">site</span><span class="p">}</span>

        <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">variant</span><span class="o">=</span><span class="dl">"</span><span class="s2">contained</span><span class="dl">"</span> <span class="nx">color</span><span class="o">=</span><span class="dl">"</span><span class="s2">primary</span><span class="dl">"</span> <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="nx">html_url</span><span class="p">}</span><span class="o">&gt;</span>

          <span class="nx">View</span> <span class="nx">Repo</span>

        <span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>
      <span class="o">&lt;</span><span class="sr">/CardActions</span><span class="err">&gt;
</span>
    <span class="o">&lt;</span><span class="sr">/Card</span><span class="err">&gt;
</span>
  <span class="p">);</span>

<span class="err">‚Ä¶</span><span class="p">.</span>

</code></pre></div></div>

<h2 id="development">Development:</h2>

<p>I think programming is an invaluable skill that I am constantly learning to improve. So, I highly recommend those creating their own website to at least try to program it themselves. It is an adventure of pain and misery that I wish to inflict onto others, hahaha, haha, ha‚Ä¶ But extremely rewarding when you finally see that beautiful glowing (please don‚Äôt make your website glow, it‚Äôs annoying) website plastered on your web browser (please let it be Chromium based or just basically not Explorer). All programmers need some system in which to develop whatever it is they care about creating. This is where things like Integrated Development Environments (IDEs), debuggers, and testing frameworks come in handy.</p>

<p>To keep myself sane, I spent a long, arduous, and tedious time trying and experimenting with different workflows for developing systems. And I have found the holy grail that has answered all of <em>my</em> questions and that allows for 10X greater productivity for *me *(your results will most certainly differ if you decide to use the same developmental setup). For me, I found the combination of <a href="https://code.visualstudio.com/">Visual Studio Code</a> and <a href="https://www.docker.com/">Docker</a> to be the textbook definition of perfection. In particular, the <a href="https://code.visualstudio.com/docs/remote/containers">Remote Container</a> extension that some genius made. This extension allows you to connect your vscode editor to a docker container‚Äôs file system. So, why is this so important to me? Well Docker allows you to spin up pretty much any environment you want such as a node server for hosting a ReactJS website :D, but most importantly it allows you to version and share these environments through Dockerfiles. This allows me to specify an environment per project, so I don‚Äôt have to maintain installing all of the dependencies that may conflict with each other on my local machine. This is why I use Docker for pretty much everything I do and I also quite enjoy using vscode, so being able to marry the two is absolute perfection!</p>

<h1 id="conclusion">Conclusion</h1>

<p>So, that concludes my first blog post! I hope you are able to use some of these awesome things I learned while creating my own website for your own. Keep a lookout for my future posts, I am planning on creating posts circulating around the following topics:</p>

<ul>
  <li>
    <p>Machine Language Processing (MLP) - like Natural Language Processing (NLP), but for computer nerds like us ü§ì.</p>
  </li>
  <li>
    <p>Automatic Code Comment Generation using Deep Learning.</p>
  </li>
</ul>

<p>Also, feel free to contact me using my custom ‚ÄúContact‚Äù system, which uses this awesome <a href="https://github.com/dwyl/learn-to-send-email-via-google-script-html-no-server">Google Script</a> for sending emails without the need of manually setting up a backend server, integrated into my website or on twitter <a href="https://twitter.com/ncooper57">@ncooper57</a> :).</p>]]></content><author><name>Nathan Cooper</name></author><category term="website" /><category term="awesome" /><summary type="html"><![CDATA[A walk through of the awesome hings I Learned while making my own personal website.]]></summary></entry></feed>